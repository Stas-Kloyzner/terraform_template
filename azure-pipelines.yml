
trigger: none
# pr:
#   branches:
#     include:
#       - main
#   paths:
#     exclude:
#       - README.md
#       - infracost_ci_integration.yml
#       - azure-pipelines.yml
pool:
  name: w7pool

variables:
  - name: TF_ROOT
    value: ./ 
  - name: SSH_AUTH_SOCK
    value: /tmp/ssh_agent.sock
stages:

- stage: Terraform_infracost
trigger: none
  displayName: Terraform_infracost

  jobs:

  - job: infracost
    displayName: Run Infracost

    steps:
      - task: InfracostSetup@1
        displayName: Setup Infracost
        inputs:
          apiKey: $(infracostApiKey)

      - bash: |
          sudo rm -r /tmp/base
          branch=$(System.PullRequest.TargetBranch)
          branch=${branch#refs/heads/}
          git clone $(Build.Repository.Uri) --branch=${branch} --single-branch /tmp/base
        displayName: Checkout base branch

      - bash: |
          infracost breakdown --path=$(TF_ROOT) \
                              --format=json \
                              --out-file=/tmp/infracost-base.json
        displayName: Generate Infracost cost estimate baseline

      - bash: |
          infracost diff --path=$(TF_ROOT) \
                         --format=json \
                         --compare-to=/tmp/infracost-base.json \
                         --out-file=/tmp/infracost.json
        displayName: Generate Infracost diff

      - bash: |
          infracost comment github --path=/tmp/infracost.json \
                                   --github-token=$(githubToken) \
                                   --pull-request=$(System.PullRequest.PullRequestNumber) \
                                   --repo=$(Build.Repository.Name) \
                                   --behavior=update
        displayName: Post Infracost comment

- stage: Terraform_CI
  displayName: Terraform_CI
  dependsOn: Terraform_infracost
  
  jobs:

  - job: install
    displayName: install terraform and prerequisites

    steps:
    
    - task: CmdLine@2
      inputs:
        script: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
      displayName: 'update system and get gnupg and curl packages'

    - task: CmdLine@2
      inputs:
        script: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform
      displayName: 'install terraform'

  - job: staging_init_and_plan
    variables:
    - group: staging_vars
    - group: azure_credentials
    dependsOn: install
    displayName: staging_init_and_plan

    steps:
    - checkout: none
    - task: CmdLine@2
      inputs:
        script: |
          export ARM_CLIENT_ID=$(client_id)
          export ARM_CLIENT_SECRET=$(secret)
          export ARM_TENANT_ID=$(tenant)
          export ARM_SUBSCRIPTION_ID=$(subscription_id)
          terraform init
          terraform workspace select $(rg) || terraform workspace new $(rg)
          terraform init
          terraform plan -out=$(rg)_plan -var 'environment=$(rg)' -var 'vmss_admin_username=$(vmss_admin)' -var 'vmss_admin_password=$(vmss_pass)' -var 'vmss_instances=$(vmss_instances)'
        workingDirectory: '$(agent.builddirectory)/s'
      displayName: staging_init_and_plan
      
  - job: production_init_and_plan
    variables:
    - group: production_vars
    - group: azure_credentials
    dependsOn: staging_init_and_plan
    displayName: production_init_and_plan

    steps:
    - checkout: none
    - task: CmdLine@2
      inputs:
        script: |
          export ARM_CLIENT_ID=$(client_id)
          export ARM_CLIENT_SECRET=$(secret)
          export ARM_TENANT_ID=$(tenant)
          export ARM_SUBSCRIPTION_ID=$(subscription_id)
          terraform init
          terraform workspace select $(rg) || terraform workspace new $(rg)
          terraform init
          terraform plan -out=$(rg)_plan -var 'environment=$(rg)' -var 'vmss_admin_username=$(vmss_admin)' -var 'vmss_admin_password=$(vmss_pass)' -var 'vmss_instances=$(vmss_instances)'
        workingDirectory: '$(agent.builddirectory)/s'
      displayName: production_init_and_plan

  - job: package_and_export_artifct
    dependsOn: production_init_and_plan
    displayName: package_and_export_artifct
  
    steps:
    - checkout: none
    - task: CmdLine@2
      inputs:
        script: 'sudo apt-get -y install zip'
      displayName: 'install zip'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(agent.builddirectory)/s'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(agent.builddirectory)/a/terraform.zip'
        replaceExistingArchive: true
        verbose: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(agent.builddirectory)/a'
        ArtifactName: 'terraform'
        publishLocation: 'Container'
